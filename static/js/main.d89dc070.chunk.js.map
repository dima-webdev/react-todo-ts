{"version":3,"sources":["components/NavBar.tsx","components/TodoForm.tsx","components/TodoList.tsx","pages/TodosPage.tsx","pages/AboutPage.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["NavBar","className","href","id","to","TodoForm","props","ref","useRef","type","placeholder","onKeyPress","event","key","onAdd","current","value","htmlFor","TodoList","todos","onToggle","onRemove","length","map","todo","classes","completed","push","join","checked","onChange","bind","title","onClick","TodosPage","useState","setTodos","useEffect","saved","JSON","parse","localStorage","getItem","setItem","stringify","newTodo","Date","now","prev","filter","AboutPage","history","useHistory","App","component","path","exact","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.d89dc070.chunk.js","sourcesContent":["import React from 'react';\nimport { NavLink } from \"react-router-dom\";\n\nexport const NavBar: React.FC = () => {\n    return <>\n        <nav>\n            <div className=\"nav-wrapper teal darken-4 px1\">\n                <a href=\"/\" className=\"brand-logo\">TodoList React + TypeScript</a>\n                <ul id=\"nav-mobile\" className=\"right hide-on-med-and-down\">\n                    <li>\n                        <NavLink to=\"/\">Список дел</NavLink>\n                    </li>\n                    <li>\n                        <NavLink to=\"/about\">Информация</NavLink>\n                    </li>\n                </ul>\n            </div>\n        </nav>\n    </>\n}","import React, {useRef} from \"react\";\n\ninterface TodoFormProps {\n    onAdd(title: string): void\n}\n\nexport const TodoForm: React.FC<TodoFormProps> = (props) => {\n    // const [title, setTitle] = useState<string>('');\n\n    const ref = useRef<HTMLInputElement>(null);\n\n    // const changeHandler = (event: React.ChangeEvent<HTMLInputElement>) => {\n    //     setTitle(event.target.value);\n    // }\n\n    const keyPressHandler = (event: React.KeyboardEvent) => {\n        if (event.key === 'Enter') {\n            props.onAdd(ref.current!.value);\n            ref.current!.value = '';\n        }\n    }\n\n    return (\n        <div className=\"input-field mt2\">\n            <input\n                // onChange={changeHandler}\n                // value={title}\n                ref={ref}\n                type=\"text\"\n                id=\"title\"\n                placeholder=\"Введите название дела\"\n                onKeyPress={keyPressHandler}\n            />\n            <label htmlFor=\"title\" className=\"active\">\n                Введите название дела\n            </label>\n        </div>\n    );\n}","import React from 'react';\nimport {iTodo} from \"../interfaces\";\n\ntype TodoListProps = {\n    todos: iTodo[]\n    onToggle(id: number): void\n    onRemove: (id: number) => void\n}\n\nexport const TodoList: React.FC<TodoListProps> = ({todos, onToggle, onRemove}) => {\n    if (todos.length === 0) {\n        return <p className=\"center\">Пока дел нет!</p>\n    }\n    return (\n        <ul>\n            {todos.map(todo => {\n                const classes = ['todo']\n                if (todo.completed) {\n                    classes.push('completed')\n                }\n\n                return (\n                    <li className={classes.join(' ')} key={todo.id}>\n                        <label>\n                            <input\n                                type=\"checkbox\"\n                                checked={todo.completed}\n                                onChange={onToggle.bind(null, todo.id)}\n                            />\n                            <span>{todo.title}</span>\n                            <i\n                                className=\"material-icons red-text\"\n                                onClick={() => onRemove(todo.id)}\n                            >\n                                delete\n                            </i>\n                        </label>\n                    </li>\n                )\n            })}\n        </ul>\n    );\n}","import React, {useState, useEffect} from 'react';\nimport {TodoForm} from \"../components/TodoForm\";\nimport {TodoList} from \"../components/TodoList\";\nimport {iTodo} from \"../interfaces\";\n\nexport const TodosPage: React.FC = () => {\n    const [todos, setTodos] = useState<iTodo[]>([]);\n\n    useEffect(() => {\n        const saved = JSON.parse(localStorage.getItem('todos') || '[]') as iTodo[];\n        setTodos(saved);\n    }, []);\n\n    useEffect(() => {\n        localStorage.setItem('todos', JSON.stringify(todos));\n    }, [todos]);\n\n    const addHandler = (title: string) => {\n        const newTodo: iTodo = {\n            title,\n            id: Date.now(),\n            completed: false\n        };\n        setTodos(prev => [newTodo, ...prev]);\n    }\n\n    const toggleHandler = (id: number) => {\n        setTodos(prev => prev.map(todo => {\n            if (todo.id === id) {\n                return {\n                    ...todo,\n                    completed: !todo.completed\n                }\n            }\n            return todo;\n        }));\n    }\n\n    const removeHandler = (id: number) => {\n        setTodos(prev => prev.filter(todo => todo.id !== id));\n    }\n    return (\n        <>\n            <TodoForm onAdd={addHandler} />\n            <TodoList\n                todos={todos}\n                onToggle={toggleHandler}\n                onRemove={removeHandler}\n            />\n        </>\n    );\n}","import React from 'react';\nimport { useHistory } from 'react-router-dom';\n\nexport const AboutPage: React.FC = () => {\n    const history = useHistory();\n    return (\n        <>\n            <h1>Стрница информации</h1>\n            <p>Lorem ipsum dolor sit amet, consectetur adipisicing elit. Aut commodi cum dignissimos laudantium magnam quaerat quo recusandae rem sint unde.</p>\n            <button className=\"btn\" onClick={() => history.push('/')}>Обратно к списку дел</button>\n        </>\n    );\n}","import React from 'react';\nimport {BrowserRouter, Switch, Route} from 'react-router-dom';\nimport {NavBar} from \"./components/NavBar\";\nimport {TodosPage} from \"./pages/TodosPage\";\nimport {AboutPage} from \"./pages/AboutPage\";\n\nconst App: React.FC = () => {\n    return (\n        <BrowserRouter>\n            <NavBar />\n            <div className=\"container\">\n                <Switch>\n                    <Route component={TodosPage} path=\"/\" exact />\n                    <Route component={AboutPage} path=\"/about\" />\n                </Switch>\n            </div>\n        </BrowserRouter>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}